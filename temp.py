def sjf(processes):    """    الگوریتم SJF    processes: لیست دیکشنری‌ها با کلیدهای 'PID', 'Arrival', 'Service'    """    n = len(processes)    completed = [False] * n    time = 0    done = 0    results = []        while done < n:        idx = -1        shortest = float('inf')                for i in range(n):            if (not completed[i] and                 processes[i]['Arrival'] <= time and                 processes[i]['Service'] < shortest):                shortest = processes[i]['Service']                idx = i                if idx == -1:            time += 1        else:            p = processes[idx]            start = time            end = time + p['Service']                        results.append({                'PID': p['PID'],                'Arrival': p['Arrival'],                'Service': p['Service'],                'Start': start,                'End': end,                'Waiting': start - p['Arrival']            })                        time = end            completed[idx] = True            done += 1        # مرتب‌سازی بر اساس Arrival Time    results.sort(key=lambda x: x['Arrival'])    return results# ورودی از کاربرprint("چند فرآیند دارید؟")n = int(input())processes = []for i in range(n):    print(f"\nفرآیند {i+1}:")    pid = input("PID: ")    arrival = int(input("Arrival Time: "))    service = int(input("Service Time: "))        processes.append({        'PID': pid,        'Arrival': arrival,        'Service': service    })# اجرای الگوریتمresults = sjf(processes)# نمایش نتایجprint("\n" + "="*70)print(f"{'PID':<8} {'Arrival':<10} {'Service':<10} {'Start':<8} {'End':<8} {'Waiting':<10}")print("="*70)total_wait = 0total_turnaround = 0for r in results:    print(f"{r['PID']:<8} {r['Arrival']:<10} {r['Service']:<10} {r['Start']:<8} {r['End']:<8} {r['Waiting']:<10}")    total_wait += r['Waiting']    total_turnaround += (r['End'] - r['Arrival'])print("="*70)print(f"میانگین زمان انتظار: {total_wait/n:.2f}")print(f"میانگین زمان برگشت: {total_turnaround/n:.2f}")print("="*70)